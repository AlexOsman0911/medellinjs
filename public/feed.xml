<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MedellinJS</title>
    <link>http://medellinjs.org</link>
    <description>JavaScript User Group</description>
    <atom:link href="http://medellinjs.org/feed.xml" rel="self" type="application/rss+xml" />
    
        
        <item>
        <title>Introducción a Arduino y Node.js - HTTP - Parte 2</title>
        <description><![CDATA[<p><em>A continuación presentamos el segundo artículo de la serie <strong>Introducción a Arduino y Node.js</strong>, 
el primero lo pueden leer en: <a href="http://medellinjs.org/posts/introduccion-arduino-nodejs-1">Introducción a Arduino y Node.js - Serial - Parte 1</a></em></p>
<p>En el artículo anterior dimos una introducción a la programación de Arduino y Node.js 
en el cual realizamos una comunicación entre dos aplicaciones, una se ejecutaba en el Arduino (C++) y la 
otra corría en el computador con Node.js, la comunicación se estableció a través del puerto serial (USB). </p>
<p>En este nuevo artículo aprenderemos a realizar esta comunicación utilizando el protocolo HTTP.
<!-- more --></p>
<p>Para este caso vamos a reutilizar el montaje del Sensor de Temperatura que utilizamos
en el artículo anterior.</p>
<h3>Sensor de Temperatura</h3>
<p><strong>Componentes necesarios</strong></p>
<ul>
<li>1 Arduino UNO/Leonardo (o compatible) con cable USB</li>
<li>1 Shield Wifi o Ethernet con su respectivo cable</li>
<li>1 Sensor de temperatura LM35</li>
<li>1 LED Rojo</li>
<li>1 LED Verde</li>
<li>2 resistencias de 220 Ohms</li>
<li>Breadboard</li>
<li>Cables</li>
</ul>
<h4>Montaje</h4>
<p><img src="http://i.imgur.com/q7AcLuh.png?1" alt="Montaje"></p>
<h2>Comunicación HTTP Arduino &lt;&gt; Node.js</h2>
<p>El objetivo principal es crear un servidor <code>http</code> en Node.js el cual recibirá una petición
para validar si la temperatura supera un límite establecido y así tomar la decisión de encender
el LED Verde o el LED Rojo.</p>
<h3>Servidor HTTP en Node.js</h3>
<p>A continuación aprenderemos a crear un Servidor <code>http</code> básico utilizando Node.js.</p>
<p>El servidor responderá a una URL <code>/temp</code> la cual recibirá un parametro llamado <code>value</code> 
que contendrá el valor de temperatura retornado por el sensor. </p>
<p>El valor será comparado con el límite superior llamado <code>TEMP_LIMIT</code> y retornará <code>|warning|</code>
si este valor es superado o <code>|normal|</code> en caso contrario.</p>
<h4>server.js</h4>
<pre><code class="language-javascript">var http = require(&#39;http&#39;);
var url = require(&#39;url&#39;);

var TEMP_LIMIT = 28;

// Definimos el servidor HTTP
// La función interna es conocida como `request handler`, y es ejecutada
// cada vez que una peticion `http` llega al servidor
var server = http.createServer(function (req, res) {
  // Obtenemos la `url` solicitada por el cliente, esta `url` contiene
  // los parámetros de la petición, luego necesitamos analizar (parsear) su contenido
  var endpoint = req.url;

  // Verificamos si la URL contiene la ruta `/temp`
  if (endpoint.indexOf(&#39;/temp&#39;) !== -1) {
    // Analizamos la URL para extraer su contenido
    var parsedUrl = url.parse(endpoint, true);

    // Obtenemos el objeto que contiene los parámetros
    var params = parsedUrl.query || {};

    // Obtenemos la temperatura o `null` si no tenemos ningún valor
    var temp = params.value || null;

    // Realizamos la validación de temperatura y retornamos el resultado al cliente
    if (temp) {

      if (temp &gt; TEMP_LIMIT) {
        res.write(&#39;|warning|&#39;);
      } else {
        res.write(&#39;|normal|&#39;);
      }

    } else {
      res.write(&#39;Wrong param, please use `value`&#39;);
    }

  } else {
    res.write(&#39;Wrong endpoint, please use `/temp`&#39;);
  }

  res.end();
});

// Ejecutamos nuestro servidor en el puerto 8080
server.listen(8080);</code></pre>
<p>Para correr el servidor debemos ejecutar:</p>
<pre><code>$ node server.js</code></pre>
<p>Las peticiones <code>http</code> locales las podremos realizar a la ruta <code>http://localhost:8080</code></p>
<pre><code>$ curl http://localhost:8080/temp?value=22
|normal|

$ curl http://localhost:8080/temp?value=29
|warning|</code></pre>
<p>Los caracteres <code>|</code> los utilizaremos para delimitar el mensaje que necesitamos en el Arduino.</p>
<p>Ya nuestro servidor Node.js está listo para recibir peticiones desde el Arduino, a continuación
aprenderemos a conectar nuestro Arduino a la red y así poder realizar una petición HTTP.</p>
<h3>Cliente Arduino</h3>
<p>Para el cliente haremos algunas modificaciones al código del primer artículo, en este caso
cada 5 segundos realizaremos una petición <code>GET</code> al servidor Node.js y luego tomaremos
la decisión.</p>
<h4>client.ino</h4>
<pre><code class="language-c">// Incluimos las librerias necesarias para trabajar con el Ethernet Shield
// Si estas usando el Wifi Shield debes incluir &lt;WiFi.h&gt; en lugar de &lt;Ethernet.h&gt;
// Mas información en http://arduino.cc/en/Guide/ArduinoWiFiShield
#include &lt;Ethernet.h&gt;
#include &lt;SPI.h&gt;

#define LED_RED 7 // Definimos el pin del LED rojo
#define LED_GREEN 8 // Definimos el pin del LED verde
#define TEMP_SENSOR 0 // Definimos el pin analogo del sensor

// Definimos la MAC Address de nuestro Ethernet Shield
byte mac[] = {0x90, 0xA2, 0xDA, 0x0E, 0x98, 0x91};

// Definimos la Dirección IP del Servidor Node.js
byte server[] = {192, 168, 169, 100};

// Definimos la Dirección IP del Arduino
byte ip[] = {192, 168, 169, 120};

// Instanciamos el cliente Ethernet con el que nos conectaremos al servidor
EthernetClient client;

// Definimos la variable donde almacenaremos la respuesta del servidor.
String response = String(10);
// Definimos el separador del mensaje
char separator = &#39;|&#39;;
// Utilizaremos esta variable para verificar si la lectura de la respuesta ha comenzado
boolean started = false;

void setup() {
  Ethernet.begin(mac, ip); // Iniciamos el Ethernet Shield
  Serial.begin(9600); // Utilizaremos el puerto Serial como debug

  pinMode(LED_RED, OUTPUT); // Definimos el pin del LED rojo como salida
  pinMode(LED_GREEN, OUTPUT); // Definimos el pin del LED verde como salida
}

void loop() {
  // Utilizamos la misma lógica de lectura del sensor vista en el artículo
  // anterior.
  int voltage = analogRead(TEMP_SENSOR);
  int temp = (5 * voltage * 100) / 1024;

  // Realizamos la conexión al servidor Node.js en el puerto 8080
  if (client.connect(server, 8080)) {
    // Enviamos la peticion GET utilizando el protocolo HTTP
    client.println(&quot;GET /temp?value=&quot; + String(temp) + &quot; HTTP/1.0&quot;);
    client.println();

    // A continuación realizaremos la lectura de la respuesta desde el servidor
    // En este caso solo vamos a hacer lectura mientras estemos conectados
    // Luego de leer la respuesta completa desconectamos el cliente
    while (client.connected()) {
      // Solo realizaremos la lectura de la respuesta si el cliente tiene
      // algo para nosotros
      if (client.available()) {
        // Debemos leer caracter por caracter
        char c = client.read();

        // En el siguiente bloque de código utilizaremos el separador `|` para
        // verificar cuando empieza y termina el mensaje que necesitamos
        if (c != separator &amp;&amp; started) {
          response += c;
        } else if (c == separator &amp;&amp; !started) {
          started = true;
        } else if (c == separator &amp;&amp; started) {
          started = false;
          client.stop();
        }
      }
    }

    // Luego de recibir la respuesta del servidor podemos decidir cual LED encender
    if (response == &quot;normal&quot;) {
      digitalWrite(LED_GREEN, HIGH);
      digitalWrite(LED_RED, LOW);
    } else if (response == &quot;warning&quot;) {
      digitalWrite(LED_GREEN, LOW);
      digitalWrite(LED_RED, HIGH);
    }

    response = &quot;&quot;; // Limpiamos la variable para la siguiente petición
  } else {
    Serial.print(&quot;connection failed&quot;);
  }

  delay(5000); // Esperamos 5s antes de empezar la siguiente peticion.
}</code></pre>
<p>Este ejemplo tiene un mayor nivel de dificultad ya que debemos realizar la petición HTTP a
bajo nivel aunque en la red existen librerias de terceros que implementan un
cliente HTTP con un API mucho mas sencillo, algunas alternativas son: </p>
<ul>
<li><a href="https://github.com/amcewen/HttpClient">amcewen/HttpClient</a></li>
<li><a href="https://github.com/interactive-matter/HTTPClient">interactive-matter/HTTPClient</a>. </li>
</ul>
<p>Oficialmente solo el <a href="http://arduino.cc/en/Main/ArduinoBoardYun?from=Products.ArduinoYUN">Arduino Yun</a> dentro de sus librerias tiene una clase llamada <a href="http://arduino.cc/en/Reference/YunHttpClientConstructor">HttpClient</a>
que permite realizar peticiones HTTP de una forma mucho mas simple.</p>
<p>Espero que les haya gustado este nuevo artículo, en una próxima ocasión aprenderemos
como realizar esta conexión a través de WebSockets :)</p>
<h3>Más artículos de la serie</h3>
<h4><a href="http://medellinjs.org/posts/introduccion-arduino-nodejs-1">Introducción a Arduino y Node.js - Serial - Parte 1</a></h4>
<h4>Introducción a Arduino y Node.js - WebSockets - Parte 3 (Próximamente)</h4>
<h4>Introducción a Arduino y Node.js - MQTT - Parte 4 (Próximamente)</h4>
<h4>Introducción a Arduino y Node.js - Johnny Five - Parte 5 (Próximamente)</h4>
]]></description>
        <pubDate>Agosto, 7, 2014</pubDate>
        <link>http://medellinjs.org/posts/introduccion-arduino-nodejs-2</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/introduccion-arduino-nodejs-2</guid>
      </item>
    
        
        <item>
        <title>Armando tu propio kit de Arduino</title>
        <description><![CDATA[<p>Esta es una guía de como armar tu propio kit de Arduino para jugar con <a href="https://github.com/rwaldron/johnny-five">Johnny-five</a> en el próximo <a href="https://ti.to/medellinjs/NodeBotsDay-2014-1">NodeBots Day</a>.
<!-- more --></p>
<h2>Armando tu propio kit de Arduino sin comprar nada en el exterior</h2>
<p>Esta guía esta destinada a todo aquel que se muere de ganas por experimentar con Arduino pero su gran problema es adquirir el kit para poder comenzar.</p>
<p>Todos sabemos que JavaScript es sexy y también consideramos que programar hardware es cool... por lo tanto una iniciativa como <a href="http://NodeBots.io/">NodeBots</a> es la bomba.</p>
<p>Luego de intentar muchas veces adquirir un kit, considerar diversas opciones, algunas costosas y muy completas, otras más económicas pero limitadas, me hice la pregunta de que tal sería armar un kit con un buen balance entre costo/posibilidades y que pudiera ser adquirido con un proveedor local.</p>
<p>Así que, me di a la tarea de buscar por internet proveedores locales que distribuyeran Arduino y sus componentes. Sin mucha sorpresa di con uno en el centro comercial la Cascada (para quienes no están familiarizados, este centro comercial ubicado en el centro de Medellín está especializado en componentes electrónicos). El local en cuestion es <a href="http://www.didacticaselectronicas.com/">I+D Electrónica</a>, en su tienda en línea tiene una sección dedicada a Arduino.</p>
<p>Uno de los kits que consulte y que parecia no estar tan mal fue el de Sunfounder, incluye muchos componentes pero no el Arduino, el cual se debe conseguir por aparte. Tambié incluye una guia de experimentos  que se puede conseguir en línea:</p>
<p><img src="https://dl.dropboxusercontent.com/u/212845/kit%20arduino/kit-completo.jpg" alt="Kit Sunfounder" title="Kit Sunfounder"></p>
<p>Así que esta es la lista de componentes y su respectivo precio en <a href="http://www.didacticaselectronicas.com/">I+D Electrónica</a>, para el kit de Sunfounder y un Arduino Uno versión China:</p>
<table>
<thead>
<tr>
<th>Componente</th>
<th>Valor</th>
</tr>
</thead>
<tbody>
<tr>
<td>1x Pantalla LCD 16x2</td>
<td>$10.000</td>
</tr>
<tr>
<td>1x Cable USB</td>
<td>$2.600</td>
</tr>
<tr>
<td>1x Protoboard</td>
<td>$3.700</td>
</tr>
<tr>
<td>2x Set de cables de conexión x10</td>
<td>$6.000</td>
</tr>
<tr>
<td>10x Resistencia - 220R</td>
<td>$200</td>
</tr>
<tr>
<td>10x Resistencia - 1 kR</td>
<td>$200</td>
</tr>
<tr>
<td>10x Resistencia - 10 kR</td>
<td>$200</td>
</tr>
<tr>
<td>10x Resistencia - 100 kR</td>
<td>$200</td>
</tr>
<tr>
<td>10x Resistencia - 1 MR</td>
<td>$200</td>
</tr>
<tr>
<td>10x Resistencia - 5.1 MR</td>
<td>$200</td>
</tr>
<tr>
<td>5x Transistor NPN 2N3904</td>
<td>$80</td>
</tr>
<tr>
<td>5x Transistor FET 2n3906</td>
<td>$80</td>
</tr>
<tr>
<td>2x Diodo rectificador 1n4007</td>
<td>$100</td>
</tr>
<tr>
<td>1x Diodo Zener</td>
<td>$100</td>
</tr>
<tr>
<td>1x Sensor de movimiento</td>
<td>$10.000</td>
</tr>
<tr>
<td>1x Sensor de luz - Foto-resistencia</td>
<td>$900</td>
</tr>
<tr>
<td>1x Sensor de temperatura lm35</td>
<td>$2.600</td>
</tr>
<tr>
<td>2x Pulsadores</td>
<td>$600</td>
</tr>
<tr>
<td>1x Potenciometro 5k</td>
<td>$500</td>
</tr>
<tr>
<td>1x Servo Motor</td>
<td>$14.000</td>
</tr>
<tr>
<td>1x LED RGB</td>
<td>$500</td>
</tr>
<tr>
<td>3x LED verde</td>
<td>$300</td>
</tr>
<tr>
<td>3x LED rojo</td>
<td>$300</td>
</tr>
<tr>
<td>3x LED amarillo</td>
<td>$300</td>
</tr>
<tr>
<td>1x Piezo Buzzer/Speaker</td>
<td>$1.300</td>
</tr>
<tr>
<td>1x Relay</td>
<td>$1.400</td>
</tr>
<tr>
<td>Arduino Uno (versión china)</td>
<td>$38.000</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>Valor total</td>
<td>$94.560</td>
</tr>
<tr>
<td>------------------------------------</td>
<td>---------</td>
</tr>
</tbody>
</table>
<p>Así que puedes conseguir un kit por menos de $100.000 y con unas prestaciones muy similares e incluso superiores en algunos casos, a el ofertado por <a href="http://www.adafruit.com/products/170">Adafruit</a> el cual tiene un precio de USD $85 (A esto hay que sumarle los costos de envío y el valor de la nacionalización).</p>
<p>Adjunto algunas guias para realizar experimentos con el:</p>
<ul>
<li><a href="https://app.box.com/s/pzwm6cqn8qj4j8utwbxf">Experimentos de Sunfounder</a> - Se pueden realizar los 14 experimentos incluidos con el kit propuesto</li>
<li><a href="http://ardx.org/src/guide/2/ARDX-EG-ADAF-WEB.pdf">Experimentos de Adafruit</a> - Se pueden realizar la mayoría de estos con el kit propuesto</li>
</ul>
<p>Para los que no conocen, aquí hay un <a href="https://www.google.com/maps/dir/Parque+Berrio,+Esquina+Calle+49,+Carrera+50,+Medell%C3%ADn,+Antioquia,+Colombia/Centro+Comercial+la+Cascada,+Carrera+53+%23+50+51,+Medell%C3%ADn,+Antioquia,+Colombia/@6.2503943,-75.5696114,275m/data=!3m2!1e3!4b1!4m13!4m12!1m5!1m1!1s0x8e4428f8d37f5941:0xe1003a1be9d3b145!2m2!1d-75.568178!2d6.249999!1m5!1m1!1s0x8e4428fee216a24b:0x52f5043a82d8b0f7!2m2!1d-75.570381!2d6.251202">mapa de como llegar al centro comercial La Cascada</a> partiendo desde la estación del mMetro Parque de Berrio. El local es el número 205 y el teléfono es: 293 14 23.</p>
<p>Animate a conseguir tu kit y te esperamos en nuestro próximo <a href="https://ti.to/medellinjs/NodeBotsDay-2014-1">NodeBots Day</a>.</p>
]]></description>
        <pubDate>Julio 12, 2014</pubDate>
        <link>http://medellinjs.org/posts/arduino-kit</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/arduino-kit</guid>
      </item>
    
        
        <item>
        <title>Introducción a Phonegap - Parte 1</title>
        <description><![CDATA[<p>En este tutorial dividido en varias secciones, aprenderemos sobre aplicaciones móviles híbridas con <a href="http://phonegap.com/">Phonegap</a>.
<!-- more --></p>
<h2>Construyendo aplicaciones móviles con Phonegap - Parte 1 instalando, generando y ejecutando un aplicativo</h2>
<p>En esta parte del tutorial veremos como instalar, construir, empaquetar y ejecutar una aplicación móvil básica usando este <em>framework</em>  que utiliza HTML, CSS y por supuesto JavaScript.</p>
<h3>Introducción</h3>
<p><img src="https://dl.dropboxusercontent.com/u/212845/Charla%20Phonegap/Build-Diagram-2.png" alt="Phonegap" title="Phonegap"></p>
<p>PhoneGap es un <em>framework</em> de desarrollo orientado a dispositivos móviles que permite construir aplicaciones de fácil portabilidad a diversas plataformas usando HTML, CSS y Javascript, en pocas palabras <a href="http://phonegap.com/">Phonegap</a> permite empaquetar un aplicativo web como un aplicativo móvil, que puede ser instalado localmente en un dispositivo soportado e incluso puede ser distribuido por las múltiples tiendas de aplicaciones de las plataformas incluidas en el <em>framework</em>.</p>
<h2>Cordova o Phonegap?</h2>
<p>Nitobi, la compañía que inició el proyecto <a href="http://phonegap.com/">Phonegap</a>, fue adquirida luego por Adobe, cuando esto sucedió, Nitobi donó el proyecto a la fundación Apache, como Phonegap era marca registrada y fue adquirida por Adobe, la fundación Apache renombro el proyecto a <a href="http://cordova.apache.org/">Apache Cordova</a>, sin embargo Adobe tomó la decisión de mantener <a href="http://phonegap.com/">Phonegap</a> sin costo alguno y luego hizo de Phonegap una distribución de Apache Cordova, esto significa que <a href="http://phonegap.com/">Phonegap</a> es igual que <a href="http://cordova.apache.org/">Apache Cordova</a>, más un par de funcionalidades extra.</p>
<h2>Plataformas soportadas</h2>
<p>Actualmente se soportan oficialmente 10 plataformas:</p>
<ul>
<li>Amazon Fire OS</li>
<li>Android</li>
<li>Blackberry 10</li>
<li>Firefox OS</li>
<li>IOS</li>
<li>Ubuntu</li>
<li>Windows Phone 7</li>
<li>Windows Phone 8</li>
<li>Windows 8</li>
<li>Tizen</li>
</ul>
<p>Algunas plataformas como WebOS, Bada y Symbian, fueron soportadas en versiones anteriores del <em>framework</em>, pero se descontinuaron debido a que dichos sistemas operativos son considerados <em>legacy</em>, pero en caso de necesidad extrema, es posible con una versión anterior construir un aplicativo para las mismas.</p>
<h2>Cómo funciona?</h2>
<p>Toda aplicación del <em>framework</em> trabaja sobre un componente nativo llamado <em>web view</em>, Este componente carga un documento HTML y este documento por lo general incluye un archivo JavaScript que es el API de <a href="http://phonegap.com/">Phonegap</a>, el cual tiene acceso a controlar el <em>hardware</em> del dispositivo, este API se comunica con un componente nativo que actúa como un <em>middleware</em> entre JavaScript y el sistema operativo del dispositivo, de una forma más gráfica:</p>
<p><img src="https://dl.dropboxusercontent.com/u/212845/Charla%20Phonegap/HTML5WrapperLarge.png" alt="middleware" title="Middleware"></p>
<h2>Instalando Phonegap</h2>
<p>Para instalar <a href="http://phonegap.com/">Phonegap</a> necesitamos tener un entorno funcional de <a href="http://nodejs.org/">NodeJS</a>, así que solo tenemos que ejecutar:</p>
<p><code>sudo npm install -g phonegap</code></p>
<p>Posterior a esto dispondremos del comando phonegap y podemos probarlo ejecutando:</p>
<p><code>phonegap --version</code></p>
<p>Si la instalación se ejecutó correctamente esto debe imprimir la versión del <strong>framework</strong> instalada</p>
<h2>Creando el proyecto</h2>
<p>Disponiendo ya del comando phonegap, para crear el proyecto basta con ejecutar:</p>
<p><code>phonegap -d create MedJSMobile com.medjs.app MedellinJS</code></p>
<p>Este comando creará un directorio MedJSMobile, y dentro tendremos nuestro proyecto que usará el ID &quot;com.medjs.app&quot; y tendrá el nombre de MedellinJS.</p>
<p>Dentro del directorio generado por ahora nos enfocaremos en el subdirectorio <strong>www</strong>, al interior de este encontraremos la estructura de un proyecto web, tenemos el archivo <strong>index.html</strong>,los directorios <strong>css</strong>,<strong>img</strong> y <strong>js</strong> para hojas de estilo, imágenes y archivos JavaScript en su orden respectivo. Hay algunos otros pero por ahora nos concentraremos en estos.</p>
<p>Lo que tenemos al comienzo es un aplicativo bastante básico que simplemente escucha por el evento <strong>deviceready</strong>, este sucede cuando el dispositivo donde se ejecuta el aplicativo está listo para trabajar, el callback cambia un mensaje en la pantalla cuando el evento ocurre (Este código se encuentra el archivo <strong>index.js</strong> dentro del directorio <strong>js</strong>).</p>
<h2>Ejecutando el aplicativo</h2>
<p>Existen diversas formas de ejecutar el aplicativo, algunas más simples que otras, estas son las diferentes opciones:</p>
<h3>Ejecución en un emulador local</h3>
<p>Para ello debemos tener un entorno de desarrollo de la plataforma donde quiero probar el aplicativo, la configuración de dicho entorno varía bastante de acuerdo al entorno deseado y el sistema operativo de mi máquina local, afortunadamente <a href="http://phonegap.com/">Phonegap</a> cubre los diferentes procesos en su <a href="http://docs.phonegap.com/en/3.4.0/guide_platforms_index.md.html#Platform%20Guides">documentación</a>.</p>
<p>Luego de realizar la configuración para la plataforma deseada podemos ejecutar:</p>
<p> <code>phonegap local run android</code></p>
<p>Este comando construye el paquete y lo instala en el emulador de la plataforma seleccionada y previamente configurada en la maquina local, en el caso del ejemplo <strong>Android</strong>.</p>
<h3>Ejecución en un dispositivo conectado por USB</h3>
<p>El dispositivo debe estar previamente configurado según la <a href="http://docs.phonegap.com/en/3.4.0/guide_platforms_index.md.html#Platform%20Guides">documentación de Phonegap</a> para cada plataforma, luego solo basta con ejecutar:</p>
<p><code>phonegap run android --device</code></p>
<p>Este comando construye el paquete para el aplicativo, lo instala en el dispositivo y por último lo ejecuta. En caso de no encontrar dispositivo alguno que cumpla con los requisitos buscará un emulador local de la plataforma seleccionada como <strong>fallback</strong></p>
<p><img src="https://dl.dropboxusercontent.com/u/212845/Charla%20Phonegap/phonegap-initial-app.png" alt="Phonegap initial app" title="phonegap initial app"></p>
<h3>Compilando en la nube y probando en un dispositivo sin conexión por cable</h3>
<p>Este método permite obviar la configuración de un entorno de desarrollo local, así que en teoría podríamos desarrollar un aplicativo solo teniendo el <strong>CLI</strong> de <a href="http://phonegap.com/">Phonegap</a> instalado y una cuenta registrada en el servicio <a href="https://build.phonegap.com">Phonegap Build</a>, este es un servicio muy útil que nos permite la construcción remota de paquetes instalables para las plataformas <strong>IOS</strong>,<strong>Android</strong> y <strong>Windows Phone</strong>, Este servicio está disponible con diversos planes siendo el más básico libre de costo alguno, para más información ver los <a href="https://build.phonegap.com/plans">planes</a>.</p>
<p>Para compilar el paquete ejecutamos:</p>
<p><code>phonegap remote run android</code></p>
<p>Si es la primera vez que lo ejecutamos, deberemos autenticarnos con la cuenta de <a href="https://build.phonegap.com">Phonegap Build</a>, luego este comando subirá nuestro código, creando la aplicación en la nube. Allí se compilará el paquete, luego imprimirá un código <strong>QR</strong> en la consola para que procedamos a escanear este con el dispositivo y podamos instalar el aplicativo compilado.</p>
<h3>Sirviendo el aplicativo por la red local sin compilarlo</h3>
<p>Este es el método más revolucionario de todos, recientemente fue lanzado el <a href="http://app.phonegap.com/">Phonegap Developer App</a>, un aplicativo que se instala en el dispositivo móvil y que permite ejecutar nuestro código directamente en el dispositivo sin que sea previamente compilado, empaquetado ni instalado.</p>
<p>El proceso es bastante simple, en la máquina local ejecuto:</p>
<p><code>phonegap serve</code></p>
<p>Esto creará un servidor en la máquina local que por defecto correrá en el puerto 3000, luego de instalar el <a href="http://app.phonegap.com/">Phonegap Developer App</a> en el dispositivo, procedemos a ejecutarlo y lo apuntamos a la dirección IP y puerto del servidor en nuestra máquina local.</p>
<p><img src="https://dl.dropboxusercontent.com/u/212845/Charla%20Phonegap/phonegap-dev-app.png" alt="Phonegap developer app" title="phonegap developer app"></p>
<p>Lo interesante de este método es la velocidad, ya que todo cambio que ejecute en mi código se enviará en tiempo real al dispositivo, eliminando los tediosos tiempos de espera para probar los cambios que es algo muy común en el desarrollo para móviles. Adicionalmente puedo probar la aplicación en múltiples dispositivos simultáneamente conectados al servidor y puedo ver en la consola de este toda la actividad en las terminales, siendo esto una gran ayuda para hacer <strong>debugging</strong>.</p>
<p>Si requiero refrescar manualmente el aplicativo, basta con hacer <strong>touch</strong> con cuatro dedos y si quiero regresar a la pantalla de conexión del aplicativo lo puedo hacer con tres dedos.</p>
<p><strong>Aquí finalizamos la primera parte, en la segunda veremos algunos frameworks para construir interfaces gráficas para aplicativos móviles.</strong></p>
]]></description>
        <pubDate>Junio 6, 2014</pubDate>
        <link>http://medellinjs.org/posts/phonegap1</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/phonegap1</guid>
      </item>
    
        
        <item>
        <title>Introducción a Arduino y Node.js - Serial - Parte 1</title>
        <description><![CDATA[<p>En esta serie de artículos aprenderemos cómo programar un Arduino y cómo podemos integrarlo con Node.js.
<!-- more --></p>
<h2>Introducción</h2>
<p>¡Estamos en el boom del Internet de las cosas! y uno de los principales actores de este boom es el <a href="http://arduino.cc/">Arduino</a>, una plataforma electrónica abierta (Open Hardware) para hacer prototipados de proyectos de una manera fácil e intuitiva, gracias a esto se ha vuelto bastante popular en los círculos de artistas, diseñadores, programadores y entusiastas permitiendoles realizar proyectos y ambientes interactivos con facilidad e incluso utilizar esta plataforma como herramienta de enseñanza para personas de todas las edades.</p>
<p>Otro de los principales actores es <a href="http://nodejs.org/">Node.js</a> ya que es una de las plataformas perfectas para realizar aplicaciones en tiempo real, justo lo que se necesita en el Internet de las cosas.</p>
<h2>¿Cómo programar un Arduino?</h2>
<p>Para programar un <a href="http://arduino.cc/">Arduino</a> necesitamos descargar e instalar el <a href="http://arduino.cc/en/Main/Software">Arduino IDE</a>, esta herramienta nos permitira programar y subir nuestros archivos al dispositivo, el lenguaje de programación utilizado es compatible con <code>C/C++</code> (a simple vista no es estrictamente <code>C/C++</code> pero al momento de compilar el IDE se encarga de agregar los headers necesarios para que funcione en el dispositivo).</p>
<p>Todo programa de Arduino necesita de 2 mètodos fundamentales <code>setup</code> y <code>loop</code>.</p>
<pre><code class="language-c">void setup() {
  // Aquì realizaremos todo el código de inicializaciòn y configuraciòn
}

void loop() {
  // Como su nombre lo indica este método se ejecutará en un ciclo infinito
  // Aquí se realizará toda la funcionalidad principal de nuestra aplicación
}</code></pre>
<p>Si quieres conocer más sobre el Lenguaje de Arduino y sus capacidades visita el <a href="http://arduino.cc/en/Reference/HomePage">Manual de Referencia</a>.</p>
<p>Personalmente considero que la mejor forma de aprender es haciendo ¿cierto?, entonces realizaremos nuestro primer proyecto básico con Arduino y luego aprenderemos como integrar este proyecto con <a href="http://nodejs.org/">Node.js</a> y así tendríamos nuestra primer solución en tiempo real - <em>¡Internet de las cosas, allá vamos!</em>.</p>
<h3>Sensor de Temperatura</h3>
<p>Construiremos un sensor de temperatura para nuestro hogar con indicador lumínico.</p>
<p><strong>Componentes necesarios</strong></p>
<ul>
<li>1 Arduino UNO/Leonardo (o compatible) con cable USB</li>
<li>1 Shield Wifi o Ethernet con su respectivo cable (solo necesario para conectarlo a un servidor Node.js)</li>
<li>1 Sensor de temperatura LM35</li>
<li>1 LED Rojo</li>
<li>1 LED Verde</li>
<li>2 resistencias de 220 Ohms</li>
<li>Breadboard</li>
<li>Cables</li>
</ul>
<h4>Montaje</h4>
<p><img src="http://i.imgur.com/q7AcLuh.png?1" alt="Montaje"></p>
<p>Aquí tenemos un circuito bastante sencillo, los dos LED están conectados a pines digitales del Arduino, en este caso el LED rojo está conectado al pin <code>7</code> y el LED verde está conectado al pin <code>8</code>. <em>Ojo, las resistencias son necesarias si no quemaremos los LED</em>.</p>
<p>Y el sensor de temperatura lo conectamos a una entrada análoga del Arduino, en este caso al pin <code>A0</code>.</p>
<p>Luego de realizar todas las conexiones incluyendo la de <code>+5V</code> y <code>GND</code> conectamos nuestro Arduino al computador a través del puerto USB y abrimos el Arduino IDE.</p>
<h4>Arduino IDE v1.5.2-BETA</h4>
<p><img src="http://i.imgur.com/VleqjdB.png" alt=""></p>
<p>En el IDE vamos a escribir el siguiente código:</p>
<pre><code class="language-c">#define LED_RED 7 // Definimos el pin del LED rojo
#define LED_GREEN 8 // Definimos el pin del LED verde
#define TEMP_SENSOR 0 // Definimos el pin analogo del sensor

int maxTemp = 22; // Este sera nuestro limite de temperatura

void setup() {
  Serial.begin(9600); // Iniciamos el puerto serial
  pinMode(LED_RED, OUTPUT); // Definimos el pin del LED rojo como salida
  pinMode(LED_GREEN, OUTPUT); // Definimos el pin del LED verde como salida
}

void loop() {
  int voltage = analogRead(TEMP_SENSOR); // Leemos el valor actual del pin analogo, este valor
                                         // puede estar entre 0 y 1023 y corresponde a un nivel de voltaje
                                         // que nos entrega el sensor.

  int temp = (5 * voltage * 100) / 1024; // Realizamos la conversion a grados celsius, esta formula se puede
                                         // encontrar en la hoja de datos del componente.

  //
  // En el siguiente bloque vamos a verificar si la temperatura actual supera el maximo definido en maxTemp
  // si es superado debemos encender el LED rojo y apagar el LED verde, de lo contrario dejamos el LED verde 
  // encendido.
  //
  // HIGH enciende el puerto digital, corresponde a un 1 o +5V.
  // LOW apaga el puerto digital, corresponde a un 0.
  //
  if (temp &gt; maxTemp) {
    digitalWrite(LED_GREEN, LOW);
    digitalWrite(LED_RED, HIGH);
  } else {
    digitalWrite(LED_GREEN, HIGH);
    digitalWrite(LED_RED, LOW);
  }

  Serial.println(temp); // Imprimimos la temperatura actual en el puerto serial

  delay(500); // Esperamos 500ms antes de empezar la siguiente lectura.
}</code></pre>
<p>Luego de escribir el código debemos subirlo al Arduino, para eso damos click al botón de <code>Upload</code> y garantizamos que el código ha sido subido con éxito.</p>
<p><img src="http://i.imgur.com/Gp2kk8v.png" alt="Arduino IDE uploading"></p>
<p>Si queremos ver lo que esta pasando en el puerto serial podemos abrir el monitor serial en <code>Tools &gt; Serial Monitor</code> o ejecutando <code>Ctrl + Shift + M</code>, allí veremos la lectura de temperatura del sensor.</p>
<p><img src="http://i.imgur.com/gW2ecEE.gif" alt="Monitor Serial"></p>
<p>Y listo, nuestro sensor de temperatura está funcionando a la perfección ¿Que fácil no?</p>
<p><iframe class="vine-embed" src="https://vine.co/v/M1pBjKLzLqz/embed/simple" width="600" height="600" frameborder="0"></iframe><script async src="//platform.vine.co/static/scripts/embed.js" charset="utf-8"></script></p>
<p>Ahora viene la grán pregunta...</p>
<h2>¿Cómo integrar Arduino con Node.js?</h2>
<p>En este primer artículo aprenderemos como integrar nuestro proyecto con Node.js através del puerto serial utilizando el módulo <a href="https://npmjs.org/serialport"><code>serialport</code></a>.</p>
<p>Primero debemos instalar el módulo utilizando el gestor de paquetes de Node.js - <a href="https://npmjs.org">npm</a></p>
<pre><code> $ npm install serialport</code></pre>
<p>Luego creamos un archivo JavaScript con el siguiente código:</p>
<h4>app.js</h4>
<pre><code class="language-javascript">// Requerimos el módulo serialport
var serialport = require(&quot;serialport&quot;);
var SerialPort = serialport.SerialPort;

// Instanciamos el objeto de conexión al puerto serial
var sp = new SerialPort(&quot;/dev/ttyACM0&quot;, {
  baudrate: 9600,
  parser: serialport.parsers.readline(&quot;\n&quot;)
});

// Abrimos la conexión al puerto serial
sp.open(function () {

  // Cada que llegue un dato serial lo imprimiremos en la consola
  // En este caso convertimos el dato en Entero y lo mostramos como
  // temperatura en grados celsius.
  sp.on(&quot;data&quot;, function (data) {
    var temp = parseInt(data, 10) + &quot; ºC&quot;;
    console.log(temp);
  });

});</code></pre>
<p>Y luego ejecutamos nuestra aplicación con el siguiente comando:</p>
<pre><code>$ node app.js</code></pre>
<p><em>Si utilizas Linux es posible que tengas un problema de permisos para leer el puerto serial, para ejecutar la aplicación utiliza <code>sudo</code></em></p>
<p><img src="http://i.imgur.com/RrjGugN.gif" alt="Output"></p>
<hr>

<p>En los próximos artículos de la serie explicaremos como conectar nuestro Arduino a un servidor <a href="http://nodejs.org/">Node.js</a> utilizando HTTP, WebSockets, Mensajes PubSub con MQTT y por último programaremos el Arduino directamente con <a href="http://nodejs.org/">Node.js</a> utilizando el framework <a href="https://github.com/rwaldron/johnny-five">Johnny-Five</a>.</p>
<h4><a href="http://medellinjs.org/posts/introduccion-arduino-nodejs-2">Introducción a Arduino y Node.js - HTTP - Parte 2</a></h4>
<h4>Introducción a Arduino y Node.js - WebSockets - Parte 3 (Próximamente)</h4>
<h4>Introducción a Arduino y Node.js - MQTT - Parte 4 (Próximamente)</h4>
<h4>Introducción a Arduino y Node.js - Johnny Five - Parte 5 (Próximamente)</h4>
]]></description>
        <pubDate>Abril 19, 2014</pubDate>
        <link>http://medellinjs.org/posts/introduccion-arduino-nodejs-1</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/introduccion-arduino-nodejs-1</guid>
      </item>
    
        
        <item>
        <title>Taller NodeBots en JSConf Uruguay</title>
        <description><![CDATA[<p>El pasado 14 y 15 de Marzo se realizó en la ciudad de Montevideo la primera edición de la <a href="http://jsconf.uy/">JSConf Uruguay</a>y tuve la oportunidad de asistir a este evento como Tallerista. <em>(esto gracias a que fuí aprobado en el proceso de selección de speakers)</em></p>
<!-- more -->

<p>El Taller realizado en este evento fue sobre <a href="http://nodebots.io">NodeBots</a> - Hardware Hacking con Node.js, en el cual aprendimos a programar un Arduino utilizando el framework <a href="https://github.com/rwaldron/johnny-five">Johnny-Five</a> y utilizando diferentes componentes electrónicos, desde un simple Led hasta un Joystick XY similares a los de PlayStation.</p>
<p><img src="http://i.imgur.com/tbWZQMj.jpg" alt="Taller"></p>
<p>Todo el contenido y código fuente de los ejercicios del taller se encuentra disponible en el siguiente repositorio:</p>
<p><a href="https://github.com/julianduque/nodebots-workshop"><a href="https://github.com/julianduque/nodebots-workshop">https://github.com/julianduque/nodebots-workshop</a></a></p>
<p>El Arduino Kit que utilizamos se puede conseguir por $55 en <a href="http://www.ebay.com/itm/UNO-R3-Starter-Kit-1602-LCD-Servo-Dot-Matrix-Breadboard-LED-Resistor-for-Arduino-/151183574145?ssPageName=ADME:L:OC:US:3160">eBay</a>:</p>
<p><img src="http://i.imgur.com/rPGg7qw.jpg" alt="Kit"></p>
<p>Este Kit es bastante completo y económico, para el taller solo utilizamos la mitad de los componentes pero sería bastante interesante realizar en futuros eventos talleres de mayor duración donde se puedan utilizar todos los componentes y porque no, trabajar en proyectos especificos integrando la parte electrónica con APIs o plataformas web.</p>
<p>Estamos viendo la forma de conseguir unos cuantos kit para MedellínJS y continuar con los talleres de NodeBots, así que si te interesa la electrónica y programación te invitamos a que consigas un kit y lo lleves al próximo evento de NodeBots Medellín que esperamos sea muy pronto ;)</p>
]]></description>
        <pubDate>Marzo 31, 2014</pubDate>
        <link>http://medellinjs.org/posts/nodebots-jsconf-uy</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/nodebots-jsconf-uy</guid>
      </item>
    
        
        <item>
        <title>Yeoman - Flujos de trabajo modernos</title>
        <description><![CDATA[<p><a href="http://yeoman.io/">Yeoman</a> es un conjunto de herramientas construidas sobre Node.js cuyo fin es el de implementar buenas prácticas de desarrollo y simplificar las tareas repetitivas que están involucradas en la realización de cualquier proyecto.
<!-- more --></p>
<p><img src="https://dl.dropboxusercontent.com/u/212845/charla_yeoman/yeomanClone.png" alt="Yeoman" title="Yeoman"></p>
<p>Los tres componentes básicos de <a href="http://yeoman.io/">Yeoman</a> son:</p>
<ul>
<li>Generación de esqueletos más conocida como <em>scalfolding</em>  que se logra por medio de los paquetes generadores llamados <em>generators</em>, estos son paquetes que contienen la estructura básica de un proyecto, sus dependencias y tareas más comunes, esto me brinda un punto inicial de mi proyecto con toda la configuración requerida y listo para el iniciar el desarrollo.</li>
<li>Administración de dependencias por medio de <a href="http://bower.io/">Bower</a>, el sistema de paquetes de JavaScript que me permite instalar, desinstalar y actualizar las dependencias de mi proyecto.</li>
<li>Automatización de tareas por medio de <a href="http://gruntjs.com/">Grunt</a> o <a href="http://gulpjs.com/">Gulp</a>, dependiendo del que haya incluido mi generador, tareas como: compilar el proyecto, empaquetarlo, comprimirlo, probarlo... pueden ser automatizadas con alguna de estas dos herramientas</li>
</ul>
<h3>Instalando Yeoman</h3>
<p>Para instalar <a href="http://yeoman.io/">Yeoman</a> debo tener instalado NodeJS y NPM, y basta con ejecutar</p>
<p><code>sudo npm install -g yo</code></p>
<p>Luego de ejecutar la instalación, tendremos el comando <strong><em>yo</em></strong> disponible, este comando al ser ejecutado nos presenta un menú con las tareas que puede ejecutar <a href="http://yeoman.io/">Yeoman</a>, tambien puedo ejecutar el comando pasando argumentos y ejecutar una tarea concreta. </p>
<p>Inicialmente <a href="http://yeoman.io/">Yeoman</a> no incluye ningún generador, por lo que es necesario instalar los que necesitemos para nuestros proyectos. uno de los más usados es el generador de webapp, para instalarlo podemos seguir el asistente de instalación que presenta el comando <strong><em>yo</em></strong> o podemos recurrir a NPM, todos los generadores de <a href="http://yeoman.io/">Yeoman</a> son paquetes de NPM que tienen el prefijo <strong>generator-</strong>, en este caso la instalación sería así:</p>
<p><code>sudo npm install -g generator-webapp</code></p>
<p>Los generadores oficiales de <a href="http://yeoman.io/">Yeoman</a> se pueden observar <a href="http://yeoman.io/official-generators.html">aquí</a>, la comunidad ha hecho su parte y más opciones <a href="http://yeoman.io/community-generators.html">están disponibles</a></p>
<h3>Creando un nuevo proyecto con Yeoman</h3>
<p>Posterior a la instalación del generador, puedo crear el esqueleto de mi proyecto, basta con crear un directorio, ubicarme en el y correr el comando <strong><em>yo</em></strong>, en el menú interactivo ya tendré la opción de usar el generador en este caso el de <strong>webapp</strong>, también puedo usar el comando con el argumento de esta manera:</p>
<p><code>yo webapp</code></p>
<p>El generador suele incluir un proceso interactivo que me permite modificar opciones del esqueleto a ser creado, debo responder a sus preguntas hasta que inicie el proceso personalizado de acuerdo a mis preferencias.</p>
<p>Cuando la ejecución termine, tendré toda la estructura inicial de mi proyecto creada: </p>
<ul>
<li>En el directorio <strong>app</strong> almacenaré todo el código de mi aplicativo</li>
<li>Las dependencias instaladas en <em>_app/bower_components</em>  </li>
<li>Las tareas incluidas listas para ser ejecutadas dentro del archivo <strong>Gruntfile.js</strong>.</li>
</ul>
<p>Una de las tareas más apreciadas incluidas en la mayoría de los generadores, es la del servidor embebido que me permite visualizar el proyecto mientras lo desarrollo, por lo general la orden es:</p>
<p><code>grunt serve</code></p>
<p>Como se puede observar, ya estoy listo para comenzar el desarrollo de mi proyecto y he ahorrado una considerable cantidad de tiempo en configuración y creación del proyecto inicial.</p>
<p>Si deseas ampliar más la información, te recomiendo la presentación usada en la charla <a href="http://slid.es/edsadr/yeoman">http://slid.es/edsadr/yeoman</a> .</p>
]]></description>
        <pubDate>Marzo 10, 2014</pubDate>
        <link>http://medellinjs.org/posts/yeoman</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/yeoman</guid>
      </item>
    
        
        <item>
        <title>Primer NodeSchool Medellín</title>
        <description><![CDATA[<p>El pasado 22 de Febrero se realizó el <a href="http://www.meetup.com/MedellinJS/events/167090612/">Primer NodeSchool en Medellín</a>,
25 personas asistieron desde las 10 de la mañana a <a href="http://en.atomhouse.co/">AtomHouse Medellín</a> un espacio
de Co-Working que abre sus puertas en la ciudad y que de ahora en adelante será un
lugar mas de encuentro para la comunidad MedellínJS.</p>
<p><!-- more --></p>
<hr />

<p><img src="http://nodeschool.io/images/nodeschool.png" alt="NodeSchool"></p>
<p><a href="http://nodeschool.io">NodeSchool</a> es una iniciativa para aprender Node.js y JavaScript
resolviendo problemas reales de programación, cada uno de los talleres está compuesto 
por diferentes niveles que van enseñando los fundamentos de esa tecnología.</p>
<p>El primer taller que trabajamos fue <code>learnyounode</code> en donde se enseñan los conceptos
básicos de Node.js, si quieres experimentar con este taller lo puedes instalar a través de npm
asi:</p>
<pre><code class="language-lang-sh">$ npm install learnyounode -g</code></pre>
<p>luego de ejecutar el comando <code>learnyounode</code> deberán realizar cada uno de los retos
propuestos:</p>
<p><img src="http://medellinjs.org/img/learnyounode.png" alt="Learn You Node"></p>
<p>Si tienen alguna duda resolviendo los talleres pueden utilizar la sección de comentarios
o asistir al siguiente taller que se realizará a finales de este mes, estén muy pendientes!</p>
]]></description>
        <pubDate>Marzo 6, 2014</pubDate>
        <link>http://medellinjs.org/posts/primer-nodeschool</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/primer-nodeschool</guid>
      </item>
    
        
        <item>
        <title>Hola Medellín!</title>
        <description><![CDATA[<p>El 7 de Noviembre del 2012 empezó MedellínJS, Desde nuestra <a href="http://www.meetup.com/MedellinJS/events/86130022/">primer reunión</a> 
venimos trabajando en el fortalecimiento del ecosistema tecnológico de la ciudad.</p>
<p>Hoy nuestro grupo cuenta con más de 750 miembros registrados y una asistencia promedio 
mensual de 80 personas, razón que nos lleva a seguir trabajando fuertemente en esta comunidad.</p>
<p><!-- more -->
Muchas gracias Medellín por su acogida y por sus ganas de aprender y emprender, 
nosotros desde MedellínJS esperamos que este nuevo año sea muy productivo para 
toda la comunidad. Es por eso que hemos creado este espacio virtual donde publicaremos 
la memoría de nuestras reuniones y artículos de interés relacionados con JavaScript.</p>
<p>Quedan todos invitados a crear contenido y compartirlo con toda la comunidad Hispanohablante,
extendemos esta invitación a todos los speakers que hemos tenido en las reuniones para
que en este espacio publiquen el material expuesto en eventos anteriores, a continuación
una guía de como contribuir a este blog.</p>
<h2>¿Cómo escribir un artículo?</h2>
<ol>
<li>Fork <a href="https://github.com/colombiajs/medellinjs"><a href="https://github.com/colombiajs/medellinjs">https://github.com/colombiajs/medellinjs</a></a></li>
<li>Crea un archivo utilizando <a href="http://github.github.com/github-flavored-markdown/">Github Flavored Markdown</a> en <code>_harp/posts/</code></li>
<li>Ingresa la información meta al archivo <code>_harp/posts/_data.json</code>, Inserta tu artículo al inicio de la lista.</li>
<li>Crea un <code>pull request</code> y nosotros haremos el resto</li>
</ol>
<p>Los invitamos a utilizar este espacio para compartir sus experiencias en JavaScript, 
¡hasta una próxima oportunidad!</p>
]]></description>
        <pubDate>Marzo 5, 2014</pubDate>
        <link>http://medellinjs.org/posts/hola-medellin</link>
        <guid isPermaLink="true">http://medellinjs.org/posts/hola-medellin</guid>
      </item>
    
  </channel>
</rss>
